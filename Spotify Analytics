/* For this project, I downloaded Spotify data from Kaggle. 
    Then I created a table to insert the Spotify data into.
    Finally, I performed analytics on the data using SQl. */

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

SELECT * FROM BIT_DB.Spotifydata;

/* #1 What is the popularity of the Top 10 danceabile songs on spotify? */
SELECT track_name, artist_name, popularity, MAX(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name, artist_name
ORDER BY MAX(danceability) DESC
LIMIT 10;

/* #2 what artist released the shortest song with the highest energy? */
SELECT artist_name, track_name, MIN(duration_ms), MAX(energy)
FROM BIT_DB.Spotifydata;

/* #3 I want to know which songs are a good match for when I am at different running paces: walk, jog, run. List in order based on tempo if I should walk, jog or run to it.*/
SELECT artist_name, track_name,
CASE
WHEN tempo < 102 THEN 'walk'
WHEN tempo < 132 THEN 'jog'
ELSE 'run'
END 'pace'
FROM BIT_DB.Spotifydata
ORDER BY tempo ASC;

/* #4 What is the average energy for the 10 least most popular songs? */
SELECT track_name, AVG(energy), popularity
FROM BIT_DB.Spotifydata
GROUP BY track_name, popularity
ORDER BY popularity ASC
LIMIT 10;

/* #5 which artists recieved at least 90 in popularity and how many times did they achieve that*/
SELECT artist_name, COUNT(popularity)
FROM BIT_DB.Spotifydata
WHERE popularity >= 90
GROUP BY artist_name
ORDER BY COUNT(popularity) DESC;

/* #6 what are the 5 least popular songS? */
SELECT track_name, MIN(popularity)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY MIN(popularity)
LIMIT 5;

/* #7 How many tracks does an artist have on the list? */
SELECT artist_name, COUNT(artist_name) tracks
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(ID) DESC;

/* #8 What is the average song key, acousticness and valence of Doja Cat songs? */
SELECT artist_name, AVG(song_key), AVG(acousticness), AVG(valence)
FROM BIT_DB.Spotifydata
where artist_name = 'Doja Cat'
GROUP BY artist_name;

/* #9 If you listened to all the songs on the list, how long is that playlist? */
SELECT SUM(duration_ms)
FROM BIT_DB.Spotifydata;

/* #10 How many times has an artist had a track with a Liveness less than 1? */
SELECT artist_name, COUNT(id)
FROM BIT_DB.Spotifydata
GROUP BY liveness
HAVING liveness < 0.100;

/* #11 List all tracks with artist name where popularity is between 90-92 and song key is between 6-10 */
SELECT artist_name, track_name, popularity, song_key
FROM BIT_DB.Spotifydata
WHERE popularity BETWEEN 90 AND 92
AND song_key BETWEEN 6 AND 10;

/* #12 list track names that have song key as 4 OR time sign 3, order by abc  */
SELECT track_name, song_key, time_signature
FROM BIT_DB.Spotifydata
WHERE song_key = 4
OR time_signature = 3
ORDER BY track_name ASC;

/* Using a CTE. First, calculate the avg popularity for the artists in the Spotify data table. Then, for every artist with a avg populatiry of 90 or above, show their name, their avg popularity and label them as a "Top Star" */
WITH average_popularity_CTE AS (
    SELECT sd.artist_name, AVG(sd.popularity) as average_popularity
    FROM Spotifydata sd
    GROUP BY sd.artist_name)
SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM average_popularity_CTE
WHERE average_popularity >= 90;
